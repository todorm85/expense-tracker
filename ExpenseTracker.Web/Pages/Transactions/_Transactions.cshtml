@model TransactionsListModel
<table class="table border rounded table-sm">
    @if (!Model.HideHeader)
    {
        <thead>
            <tr class="table-info">
                @if (Model.ShowId)
                {
                    <th>Id</th>
                }
                <th>Date</th>
                <th>Amount</th>
                <th>Details</th>
                <th>Category</th>
                @if (Model.ShowSource)
                {
                    <th>Source</th>
                }
                @if (Model.HasFailed)
                {
                    <th>Reason</th>
                }
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
    }
    <tbody>
        @for (var transx = 0; transx < Model.Transactions.Count; transx++)
        {
            var t = Model.Transactions[transx];
            var typeClass = t.Type == Core.Transactions.TransactionType.Income ? "table-success" : "";
            <tr id="@("trRow_" + t.TransactionId)" class="@typeClass">
                @if (Model.ShowId)
                {
                    <td>
                        @t.TransactionId
                    </td>
                }
                <td>
                    <input type="hidden" asp-for="@Model.Transactions[transx].TransactionId" />
                    <input id="source_@t.TransactionId" type="hidden" value="@(Model.Transactions[transx].Source)" />
                    @{
                        var dateType = Model.ShowTime ? "datetime-local" : "date";
                        var dateWidth = Model.ShowTime ? "255px" : "162px";
                    }
                    <input id="date_@t.TransactionId" type="@dateType" asp-for="@Model.Transactions[transx].Date" class="form-control" style="width: @(dateWidth)!important;" />
                </td>
                <td style="width:5%"><input id="amount_@t.TransactionId" asp-for="@Model.Transactions[transx].Amount" class="form-control auto-select" style="min-width:80px" /></td>
                <td style="width:75%">
                    <textarea id="details_@t.TransactionId" asp-for="@Model.Transactions[transx].Details" rows="@Model.DetailsHeight" class="form-control" style="min-width:220px"></textarea>
                </td>
                <td style="width:10%">
                    <input id="category_@t.TransactionId" asp-for="@Model.Transactions[transx].Category"
                           class="form-control auto-select" placeholder="name:key(opt)" style="min-width: 100px;" />
                </td>
                @if (Model.ShowSource)
                {
                    <td style="min-width: 9em;">
                        @t.Source
                    </td>
                }
                @{
                    var failedDisplay = Model.HasFailed ? "revert" : "none";
                    var addedDisplay = !Model.HasFailed ? "revert" : "none";
                }
                @if (Model.HasFailed)
                {
                    <td style="min-width: 9em;">
                        <div style="display: @failedDisplay" class="failed_@t.TransactionId">
                            <input id="category_@t.TransactionId" asp-for="@Model.Transactions[transx].Reason"
                                   class="form-control" placeholder="name:key(opt)" disabled style="min-width: 100px;" />
                        </div>
                    </td>
                }
                <td>
                    <select id="type_@t.TransactionId" asp-for="Transactions[transx].Type" asp-items="Html.GetEnumSelectList<Core.Transactions.TransactionType>()"></select>
                </td>
                <td style="width:5%;">
                    <div style="display: @failedDisplay" class="failed_@t.TransactionId">
                        <button class="updateBtn mb-1" style="width:70px" type="button" formAction="/Transactions/Api/?handler=Create"
                                onclick="onTransactionUpdate(this, '@t.TransactionId', true)">
                            force create
                        </button>
                    </div>
                    <div style="display: @addedDisplay" class="added_@t.TransactionId">
                        <button class="updateBtn mb-1" style="width:70px" type="button" formAction="/Transactions/Api/?handler=Update"
                                onclick="onTransactionUpdate(this, '@t.TransactionId')">
                            update
                        </button><br />
                        <button style="width:70px" type="button" formAction="/Transactions/Api/?handler=Delete&id=@t.TransactionId"
                                onclick="onDelete(this, '@t.TransactionId')">
                            delete
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    function onTransactionUpdate(button, id, isForceCreate) {
        var date = document.getElementById("date_" + id).value;
        var details = document.getElementById("details_" + id).value;
        var amount = document.getElementById("amount_" + id).value;
        var category = document.getElementById("category_" + id).value;
        var type = document.getElementById("type_" + id).value;
        var source = document.getElementById("source_" + id).value;

        var handler = button.formAction;
        var coverElement = document.createElement('div')
        coverElement.style = "background-color: lightgrey; width: 100%; height: 100%; position: absolute; top: 0; left: 0; opacity: 50%;"
        var parent = button.parentElement.parentElement.parentElement;
        parent.style.position = "relative";
        parent.appendChild(coverElement);
        postAjax(handler,
            sender => {
                coverElement.style.backgroundColor = 'lightgreen'
                setTimeout(() => {
                    parent.removeChild(coverElement);
                }, 700)
                if (isForceCreate) {
                    var rowsToRemove = document.querySelectorAll(".failed_" + id);
                    rowsToRemove.forEach(x => x.style.display = 'none');
                    var rowsToShow = document.querySelectorAll(".added_" + id);
                    rowsToShow.forEach(x => x.style.display = 'revert');
                }
            },
            sender => {
                coverElement.style.backgroundColor = 'red'
                setTimeout(() => {
                    parent.removeChild(coverElement);
                }, 700)
            },
            {
                Date: new Date(date),
                Details: details,
                Amount: +amount,
                Category: category,
                TransactionId: id,
                Type: +type,
                Source: source,
            }
        );
    }

    function onDelete(btn, id) {
        var handler = btn.formAction;
        postAjax(handler,
            sender => {
                var rowToRemove = document.getElementById("trRow_" + id);
                //rowToRemove.parentNode.removeChild(rowToRemove);
                rowToRemove.style.display = 'none';
            },
            sender => {
                alert("error");
            }
        );
    }
</script>